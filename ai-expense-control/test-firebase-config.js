const admin = require('firebase-admin');
require('dotenv').config();

async function testFirebaseConfig() {
  console.log('üß™ Testando Configura√ß√£o do Firebase');
  console.log('=====================================\n');

  // Verificar vari√°veis de ambiente
  console.log('üìã Verificando vari√°veis de ambiente:');

  const requiredVars = [
    'FIREBASE_PROJECT_ID',
    'FIREBASE_PRIVATE_KEY',
    'FIREBASE_CLIENT_EMAIL'
  ];

  let allVarsPresent = true;

  requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (value && value !== 'seu-projeto-firebase' && !value.includes('xxxxx')) {
      console.log(`‚úÖ ${varName}: Configurado`);
    } else {
      console.log(`‚ùå ${varName}: N√£o configurado ou valor padr√£o`);
      allVarsPresent = false;
    }
  });

  console.log();

  if (!allVarsPresent) {
    console.log('‚ö†Ô∏è  Configure as vari√°veis de ambiente no arquivo .env');
    console.log('   Consulte o arquivo GUIA_CHAVE_FIREBASE.md para instru√ß√µes');
    process.exit(1);
  }

  // Testar inicializa√ß√£o do Firebase
  console.log('üî• Testando inicializa√ß√£o do Firebase Admin SDK...');

  try {
    // Verificar se j√° foi inicializado
    if (admin.apps.length === 0) {
      admin.initializeApp({
        credential: admin.credential.cert({
          projectId: process.env.FIREBASE_PROJECT_ID,
          privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
          clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        }),
      });
    }

    console.log('‚úÖ Firebase Admin SDK inicializado com sucesso!');
    
    // Testar conex√£o com Firestore
    console.log('üìä Testando conex√£o com Firestore...');
    const db = admin.firestore();
    
    // Tentar fazer uma opera√ß√£o simples
    const testDoc = db.collection('test').doc('connection-test');
    await testDoc.set({
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      test: true
    });
    
    console.log('‚úÖ Conex√£o com Firestore estabelecida!');
    
    // Limpar documento de teste
    await testDoc.delete();
    console.log('üßπ Documento de teste removido');
    
    console.log('\nüéâ Configura√ß√£o do Firebase est√° funcionando perfeitamente!');
    console.log('   Voc√™ pode iniciar o servidor com: npm run dev');
    
  } catch (error) {
    console.log('‚ùå Erro ao inicializar Firebase:');
    console.log(`   ${error.message}`);
    
    if (error.message.includes('Failed to parse private key')) {
      console.log('\nüîß SOLU√á√ÉO:');
      console.log('   1. Verifique se a chave privada est√° formatada corretamente');
      console.log('   2. Substitua todas as quebras de linha por \\n');
      console.log('   3. Mantenha as aspas duplas');
      console.log('   4. Consulte GUIA_CHAVE_FIREBASE.md para detalhes');
    } else if (error.message.includes('project not found')) {
      console.log('\nüîß SOLU√á√ÉO:');
      console.log('   1. Verifique se o FIREBASE_PROJECT_ID est√° correto');
      console.log('   2. Confirme se o projeto existe no Firebase Console');
    } else if (error.message.includes('invalid_grant')) {
      console.log('\nüîß SOLU√á√ÉO:');
      console.log('   1. Verifique se o FIREBASE_CLIENT_EMAIL est√° correto');
      console.log('   2. Confirme se a conta de servi√ßo tem permiss√µes adequadas');
    }
    
    process.exit(1);
  }
}

// Executar o teste
testFirebaseConfig().catch(console.error);
